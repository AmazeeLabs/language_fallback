<?php

/**
 * @file
 * Hook implementations for the Language Fallback module.
 */

/**
 * Implements hook_form_alter().
 */
function language_fallback_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'locale_languages_predefined_form' || $form_id == 'locale_languages_custom_form') {
    $default_lang = language_default();
    $languages = language_list();
    $options = locale_language_list();
    if (isset($options[$default_lang->language])) {
      $options = array('' => t('Default language (@lang)', array('@lang' => $default_lang->name))) + $options;
      unset($options[$default_lang->language]);
    }
    foreach ($options as $key => $option) {
      if (!empty($languages[$key]->native)) {
        $options[$key] .= " ({$languages[$key]->native})";
      }
    }

    $key = $form_id == 'locale_languages_predefined_form' ? 'language list' : 'custom language';
    $form[$key]['fallback'] = array(
      '#type' => 'select',
      '#title' => t('Language fallback'),
      '#default_value' => '',
      '#options' => $options,
      '#description' => t('This language will be used as a fallback for text that has no translation in the selected language.'),
    );
    $form['#submit'][] = 'language_fallback_add_language_submit';
  }
}

/**
 * Form submit callback.
 */
function language_fallback_add_language_submit($form, &$form_state) {
  db_update('languages')
    ->fields(array('fallback' => $form_state['values']['fallback']))
    ->condition('language', $form_state['values']['langcode'])
    ->execute();
  if (!empty($form_state['values']['fallback'])) {
    variable_set('locale_custom_strings_' . $form_state['values']['langcode'], new localeWithFallback($form_state['values']['langcode'], $form_state['values']['fallback']));
  }
  else {
    variable_del('locale_custom_strings_' . $form_state['values']['langcode']);
  }
}
